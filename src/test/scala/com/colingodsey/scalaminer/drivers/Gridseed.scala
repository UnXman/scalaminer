/*
 * ScalaMiner
 * ----------
 * https://github.com/colinrgodsey/scalaminer
 *
 * Copyright 2014 Colin R Godsey <colingodsey.com>
 * Copyright 2011-2014 Con Kolivas
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 3 of the License, or (at your option)
 * any later version.  See COPYING for more details.
 */

package com.colingodsey.scalaminer.drivers

import org.scalatest._
import javax.xml.bind.DatatypeConverter
import com.colingodsey.scalaminer.utils._
import com.colingodsey.scalaminer.{ScalaMiner, Work}
import com.colingodsey.scalaminer.drivers.bitfury.BitFury
import com.colingodsey.scalaminer.drivers.gridseed.{GSConstants, GridSeed, DualMiner}

class GridSeedSuite extends FlatSpec {
	"Gridseed library" should "calculate btc unit gating appropriately" in {
		require(DualMiner.Constants.btc_single_open == btc_single_open)
		require(GSConstants.disableSha2ForChip.map(_.fromHex) ==
				disableSha2ForChip.map(_.fromHex),
				GSConstants.disableSha2ForChip.toString)
	}

	def disableSha2ForChip = IndexedSeq(
		"55AAEF0200000000",
		"55AAEF0300000000",
		"55AAEF0400000000",
		"55AAEF0500000000",
		"55AAEF0600000000")

	def btc_single_open = Seq(
		"55AAEF0200000001",
		"55AAEF0200000003",
		"55AAEF0200000007",
		"55AAEF020000000F",
		"55AAEF020000001F",
		"55AAEF020000003F",
		"55AAEF020000007F",
		"55AAEF02000000FF",
		"55AAEF02000001FF",
		"55AAEF02000003FF",
		"55AAEF02000007FF",
		"55AAEF0200000FFF",
		"55AAEF0200001FFF",
		"55AAEF0200003FFF",
		"55AAEF0200007FFF",
		"55AAEF020000FFFF",
		"55AAEF020001FFFF",
		"55AAEF020003FFFF",
		"55AAEF020007FFFF",
		"55AAEF02000FFFFF",
		"55AAEF02001FFFFF",
		"55AAEF02003FFFFF",
		"55AAEF02007FFFFF",
		"55AAEF0200FFFFFF",
		"55AAEF0201FFFFFF",
		"55AAEF0203FFFFFF",
		"55AAEF0207FFFFFF",
		"55AAEF020FFFFFFF",
		"55AAEF021FFFFFFF",
		"55AAEF023FFFFFFF",
		"55AAEF027FFFFFFF",
		"55AAEF02FFFFFFFF",
		"55AAEF0300000001",
		"55AAEF0300000003",
		"55AAEF0300000007",
		"55AAEF030000000F",
		"55AAEF030000001F",
		"55AAEF030000003F",
		"55AAEF030000007F",
		"55AAEF03000000FF",
		"55AAEF03000001FF",
		"55AAEF03000003FF",
		"55AAEF03000007FF",
		"55AAEF0300000FFF",
		"55AAEF0300001FFF",
		"55AAEF0300003FFF",
		"55AAEF0300007FFF",
		"55AAEF030000FFFF",
		"55AAEF030001FFFF",
		"55AAEF030003FFFF",
		"55AAEF030007FFFF",
		"55AAEF03000FFFFF",
		"55AAEF03001FFFFF",
		"55AAEF03003FFFFF",
		"55AAEF03007FFFFF",
		"55AAEF0300FFFFFF",
		"55AAEF0301FFFFFF",
		"55AAEF0303FFFFFF",
		"55AAEF0307FFFFFF",
		"55AAEF030FFFFFFF",
		"55AAEF031FFFFFFF",
		"55AAEF033FFFFFFF",
		"55AAEF037FFFFFFF",
		"55AAEF03FFFFFFFF",
		"55AAEF0400000001",
		"55AAEF0400000003",
		"55AAEF0400000007",
		"55AAEF040000000F",
		"55AAEF040000001F",
		"55AAEF040000003F",
		"55AAEF040000007F",
		"55AAEF04000000FF",
		"55AAEF04000001FF",
		"55AAEF04000003FF",
		"55AAEF04000007FF",
		"55AAEF0400000FFF",
		"55AAEF0400001FFF",
		"55AAEF0400003FFF",
		"55AAEF0400007FFF",
		"55AAEF040000FFFF",
		"55AAEF040001FFFF",
		"55AAEF040003FFFF",
		"55AAEF040007FFFF",
		"55AAEF04000FFFFF",
		"55AAEF04001FFFFF",
		"55AAEF04003FFFFF",
		"55AAEF04007FFFFF",
		"55AAEF0400FFFFFF",
		"55AAEF0401FFFFFF",
		"55AAEF0403FFFFFF",
		"55AAEF0407FFFFFF",
		"55AAEF040FFFFFFF",
		"55AAEF041FFFFFFF",
		"55AAEF043FFFFFFF",
		"55AAEF047FFFFFFF",
		"55AAEF04FFFFFFFF",
		"55AAEF0500000001",
		"55AAEF0500000003",
		"55AAEF0500000007",
		"55AAEF050000000F",
		"55AAEF050000001F",
		"55AAEF050000003F",
		"55AAEF050000007F",
		"55AAEF05000000FF",
		"55AAEF05000001FF",
		"55AAEF05000003FF",
		"55AAEF05000007FF",
		"55AAEF0500000FFF",
		"55AAEF0500001FFF",
		"55AAEF0500003FFF",
		"55AAEF0500007FFF",
		"55AAEF050000FFFF",
		"55AAEF050001FFFF",
		"55AAEF050003FFFF",
		"55AAEF050007FFFF",
		"55AAEF05000FFFFF",
		"55AAEF05001FFFFF",
		"55AAEF05003FFFFF",
		"55AAEF05007FFFFF",
		"55AAEF0500FFFFFF",
		"55AAEF0501FFFFFF",
		"55AAEF0503FFFFFF",
		"55AAEF0507FFFFFF",
		"55AAEF050FFFFFFF",
		"55AAEF051FFFFFFF",
		"55AAEF053FFFFFFF",
		"55AAEF057FFFFFFF",
		"55AAEF05FFFFFFFF",
		"55AAEF0600000001",
		"55AAEF0600000003",
		"55AAEF0600000007",
		"55AAEF060000000F",
		"55AAEF060000001F",
		"55AAEF060000003F",
		"55AAEF060000007F",
		"55AAEF06000000FF",
		"55AAEF06000001FF",
		"55AAEF06000003FF",
		"55AAEF06000007FF",
		"55AAEF0600000FFF",
		"55AAEF0600001FFF",
		"55AAEF0600003FFF",
		"55AAEF0600007FFF",
		"55AAEF060000FFFF",
		"55AAEF060001FFFF",
		"55AAEF060003FFFF",
		"55AAEF060007FFFF",
		"55AAEF06000FFFFF",
		"55AAEF06001FFFFF",
		"55AAEF06003FFFFF",
		"55AAEF06007FFFFF",
		"55AAEF0600FFFFFF",
		"55AAEF0601FFFFFF",
		"55AAEF0603FFFFFF",
		"55AAEF0607FFFFFF",
		"55AAEF060FFFFFFF",
		"55AAEF061FFFFFFF",
		"55AAEF063FFFFFFF",
		"55AAEF067FFFFFFF",
		"55AAEF06FFFFFFFF"
	).map(_.fromHex)
}
