com.colingodsey.scalaminer {
    stratum {
        #scrypt = [{...}]

        #Can remove either sha256 or scrypt blocks if not needed

        #CHANGE ME! Otherwise colinrgodsey gets your coins
        scrypt {
            host = "doge.ghash.io"
            port = 3333
            user = "colinrgodsey.smscryptdev"
            pass = "x"
        }

        sha256 {
            host = "us1.ghash.io"
            port = 3333
            user = "colinrgodsey.smsha256dev"
            pass = "x"
        }
    }

    stratum-proxy {
        #true or false for proxy spport
        enabled = true
        host = "0.0.0.0"
        port = 8099

        job-timeout = 5min
        job-timeout-gc = 45s
    }

    devices {
        usb {
            #true or false for usb support
            enabled = true

            #must also be added in ScalaMinerMain
            drivers = [dualminer, bflsc, gridseed, bitmain, icarus, bitfury]

            #scan for usb devices
            poll-time = 3s

            #reset failed usb device identities
            identity-reset-time = 45s

            device {

            }

            gridseed {
                baud = 115200
                chips = 5
                voltage = false #alt voltage
            }

            gsd {
                freq = 750
            }

            bxm {
                chips = 2
                freq-bits = 54
            }

            nfu {
                chips = 1
                freq-bits = 50
            }
        }

        default {
            #currently does nothing...
            submit-stale = false
        }

    }

    usb-blocking-dispatcher {
      # Dispatcher is the name of the event-based dispatcher
      type = Dispatcher
      # What kind of ExecutionService to use
      executor = "thread-pool-executor"
      # Configuration for the thread pool
      thread-pool-executor {
        # Keep alive time for threads
        keep-alive-time = 6s

        # Min number of threads to cap factor-based core number to
        core-pool-size-min = 0

        # The core pool size factor is used to determine thread pool core size
        # using the following formula: ceil(available processors * factor).
        # Resulting size is then bounded by the core-pool-size-min and
        # core-pool-size-max values.
        core-pool-size-factor = 0.0

        # Max number of threads to cap factor-based number to
        core-pool-size-max = 4

        # Minimum number of threads to cap factor-based max number to
        # (if using a bounded task queue)
        max-pool-size-min = 64

        # Max no of threads (if using a bounded task queue) is determined by
        # calculating: ceil(available processors * factor)
        max-pool-size-factor = 8

        # Max number of threads to cap factor-based max number to
        # (if using a  bounded task queue)
        max-pool-size-max = 128

        # Specifies the bounded capacity of the task queue (< 1 == unbounded)
        task-queue-size = -1

        # Specifies which type of task queue will be used, can be "array" or
        # "linked" (default)
        task-queue-type = "linked"

        # Allow core threads to time out
        allow-core-timeout = on
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 1
    }
}

#TODO: move this conf out with the io.usb stuff
com.colingodsey.usb {
    #to use local root only, or a virtual one
    virtual-host = false

    #list of actor refs. Use full actor selection URI with remoting! eg:
    #akka.tcp://scalaminer@192.168.0.2:3552/user/IO-Usb
    virtual-hosts = []
}

spray.can.server {
  request-timeout = 1s
  #pipelining-limit = 128

  remote-address-header = on
}

akka {
    loglevel = "INFO"
    #stdout-loglevel = "WARNING"
}

akka.remote {
    log-remote-lifecycle-events=off

  enabled-transports = ["akka.remote.netty.tcp"]
  netty.tcp {
    hostname = "0.0.0.0"
    port = 2552
  }
}

akka.actor {
    #provider = "akka.actor.LocalActorRefProvider"
    provider = "akka.remote.RemoteActorRefProvider"

    loggers = ["akka.event.slf4j.Slf4jLogger"]

    default-dispatcher {
      # Throughput for default Dispatcher, set to 1 for as fair as possible
      throughput = 20

      executor = "fork-join-executor"

      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 4

        # Parallelism (threads) ... ceil(available processors * factor)
        parallelism-factor = 1.2

        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 126

        # Specifies the bounded capacity of the task queue (< 1 == unbounded)
        task-queue-size = -1

        # Specifies which type of task queue will be used, can be "array" or
        # "linked" (default)
        task-queue-type = "linked"
      }
    }

    scheduler {
        # The LightArrayRevolverScheduler is used as the default scheduler in the
        # system. It does not execute the scheduled tasks on exact time, but on every
        # tick, it will run everything that is (over)due. You can increase or decrease
        # the accuracy of the execution timing by specifying smaller or larger tick
        # duration. If you are scheduling a lot of tasks you should consider increasing
        # the ticks per wheel.
        # Note that it might take up to 1 tick to stop the Timer, so setting the
        # tick-duration to a high value will make shutting down the actor system
        # take longer.
        tick-duration = 2ms

        # The timer uses a circular wheel of buckets to store the timer tasks.
        # This should be set such that the majority of scheduled timeouts (for high
        # scheduling frequency) will be shorter than one rotation of the wheel
        # (ticks-per-wheel * ticks-duration)
        # THIS MUST BE A POWER OF TWO!
        ticks-per-wheel = 128

        # This setting selects the timer implementation which shall be loaded at
        # system start-up.
        # The class given here must implement the akka.actor.Scheduler interface
        # and offer a public constructor which takes three arguments:
        #  1) com.typesafe.config.Config
        #  2) akka.event.LoggingAdapter
        #  3) java.util.concurrent.ThreadFactory
        implementation = akka.actor.LightArrayRevolverScheduler

        # When shutting down the scheduler, there will typically be a thread which
        # needs to be stopped, and this timeout determines how long to wait for
        # that to happen. In case of timeout the shutdown of the actor system will
        # proceed without running possibly still enqueued tasks.
        shutdown-timeout = 5s
      }
}